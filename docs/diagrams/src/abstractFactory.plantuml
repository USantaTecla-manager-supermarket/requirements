@startuml abstractFactory
class Supermarket {
-{static} CLOSING TIME: double = 20.0
- Supermarket()
- set(): void
+{static} main(args : String"[]") : void
}

class CountryFactory <<abstractFactory>> <<singleton>> {
+{static} instance() : CountryFactory
+ getTicket() : Ticket
+ getMenu() : Menu
}

class Ticket {
+ add(line : Line) : void
+ lines() : int
+ getLine (number : int) : Line
+ close() : void
+ toString() : String
+ Ticket(header, footer : Footer)
+ setLineTicketOperation (lineTicketOperation : TicketVisitor) : void
+ setGlobalTicketOperation( globalTicketOperation : TicketVisitor) : void
+ open(): void
}

class SpanishFactory {
+ SpanishFactory()
}

class FrenchFactory {
+ FrenchFactory()
}

class Menu <<factoryMethod>> {
+ Menu()
# setCommands() :void
# set(ticket: Ticket) : void
+ execute( ticket: Ticket) :void
- write(): void
- getOption() : int
+ closed() : boolean
}

class TicketBuilder <<builder>> {
+ {static} instance() : TicketBuilder
+{abstract} build() : Ticket
}

class SpanishMenu {
#setCommands() : void
}

class FrenchMenu {
#setCommands() : void
}

class SpanishTicketBuilder {

~SpanishTicketBuilder()
+build() : Ticket
}

class FrenchTicketBuilder {

~FrenchTicketBuilder()
+build() :Ticket
}



Supermarket .down.> CountryFactory

Supermarket -down-> Menu
CountryFactory <-- "menu" CountryFactory :-countryFactury
CountryFactory -right-> Menu :#ticketBuilder
CountryFactory -right-> TicketBuilder
CountryFactory <|-- SpanishFactory
CountryFactory <|-- FrenchFactory

Menu <|-- SpanishMenu
Menu <|-- FrenchMenu
TicketBuilder <-- TicketBuilder :-ticketBuilder
TicketBuilder <|-- SpanishTicketBuilder
TicketBuilder <|-- FrenchTicketBuilder
CountryFactory .down.> Ticket
Supermarket .down.> Ticket
TicketBuilder .down.> Ticket
@enduml